# -*- coding: utf-8 -*-
import os
import sys
import json
import shutil
import argparse
import chromadb
from chromadb.config import Settings
from config import VECT_DIR, META_PATH

def delete_full(confirm: bool) -> int:
    if not os.path.exists(VECT_DIR):
        print("‚Ñπ –ü–∞–ø–∫–∞ VectData —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –Ω–∏—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return 0
    if not confirm:
        ans = input(f"‚ö† –£–¥–∞–ª–∏—Ç—å –í–°–Æ –ø–∞–ø–∫—É {VECT_DIR}? (yes/no): ").strip().lower()
        if ans not in ("y", "yes", "–¥–∞"):
            print("–û—Ç–º–µ–Ω–∞.")
            return 1
    try:
        shutil.rmtree(VECT_DIR, ignore_errors=True)
        os.makedirs(VECT_DIR, exist_ok=True)
        print(f"üóë –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–Ω–æ–≤–æ: {VECT_DIR}")
        return 0
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {VECT_DIR}: {e}")
        return 2

def delete_collection(confirm: bool) -> int:
    if not os.path.exists(META_PATH):
        print("‚ö† –ù–µ –Ω–∞–π–¥–µ–Ω vect_meta.json ‚Äî –Ω–µ –∑–Ω–∞—é, –∫–∞–∫—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —É–¥–∞–ª—è—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π --full.")
        return 1
    try:
        with open(META_PATH, "r", encoding="utf-8") as f:
            meta = json.load(f)
        cname = meta.get("collection_name")
        if not cname:
            print("‚ö† –í vect_meta.json –Ω–µ—Ç –ø–æ–ª—è collection_name. –ò—Å–ø–æ–ª—å–∑—É–π --full.")
            return 1
    except Exception as e:
        print(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {META_PATH}: {e}")
        return 2

    if not confirm:
        ans = input(f"‚ö† –£–¥–∞–ª–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é '{cname}' –≤ {VECT_DIR}? (yes/no): ").strip().lower()
        if ans not in ("y", "yes", "–¥–∞"):
            print("–û—Ç–º–µ–Ω–∞.")
            return 1

    try:
        client = chromadb.PersistentClient(
            path=VECT_DIR,
            settings=Settings(anonymized_telemetry=False)
        )
        client.delete_collection(name=cname)
        print(f"üóë –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è: {cname}")
        return 0
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ {cname}: {e}")
        return 2

def main():
    parser = argparse.ArgumentParser(description="–û—á–∏—Å—Ç–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã (Chroma).")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("--full", action="store_true", help="–£–¥–∞–ª–∏—Ç—å –í–°–Æ –ø–∞–ø–∫—É VectData (–≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏).")
    group.add_argument("--collection", action="store_true", help="–£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –∏–∑ vect_meta.json.")
    parser.add_argument("--yes", action="store_true", help="–ù–µ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    args = parser.parse_args()

    if not args.full and not args.collection:
        print("–ß—Ç–æ —É–¥–∞–ª–∏—Ç—å?")
        print("1) –¢–µ–∫—É—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é (–ø–æ vect_meta.json)")
        print("2) –í–°–Æ –ø–∞–ø–∫—É VectData (–≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)")
        choice = input("–í—ã–±–æ—Ä (1/2): ").strip()
        if choice == "1":
            code = delete_collection(confirm=False)
        elif choice == "2":
            code = delete_full(confirm=False)
        else:
            print("–û—Ç–º–µ–Ω–∞.")
            code = 1
        sys.exit(code)

    if args.full:
        sys.exit(delete_full(confirm=args.yes))
    if args.collection:
        sys.exit(delete_collection(confirm=args.yes))

if __name__ == "__main__":
    main()