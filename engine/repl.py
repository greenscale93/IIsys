# -*- coding: utf-8 -*-
import re
import pandas as pd
import state

DF_ENV: dict[str, pd.DataFrame] = {}
G_ENV = None

SAFE_BUILTINS = {
    "len": len, "sum": sum, "min": min, "max": max, "sorted": sorted,
    "list": list, "dict": dict, "set": set, "any": any, "all": all, "abs": abs, "round": round,
    "enumerate": enumerate, "zip": zip
}

# –ú–µ—Ç–∫–∞ –∞–≤—Ç–æ-–∫–æ–¥–∞ (–±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ –∑–¥–µ—Å—å!)
MAGIC = "# RAGOS_AUTOCODE"

def register_dataframes(dfs_by_name: dict):
    global DF_ENV
    DF_ENV = {f"df_{name}": df for name, df in dfs_by_name.items()}

def register_graph(G):
    global G_ENV
    G_ENV = G

def _strip_code_fences(code: str) -> str:
    code = code.strip()
    if code.startswith("```"):
        code = re.sub(r'^```[^\n]*\n', '', code, flags=re.DOTALL)
        code = re.sub(r'\n?```$', '', code)
    return code.strip()

def _sanitize_code(code: str) -> str:
    code = _strip_code_fences(code)
    lines = []
    for line in code.splitlines():
        s = line.strip()
        if s.startswith("import ") or s.startswith("from "):
            continue
        lines.append(line)
    code = "\n".join(lines)
    if "read_csv" in code.lower() or ".csv" in code.lower():
        return "RAISE: CSV_IO_FORBIDDEN"
    return code

def _patch_code(code: str) -> str:
    # –ú–∏–Ω–∏-—Ñ–∏–∫—Å—ã –æ–ø–µ—á–∞—Ç–æ–∫
    code = re.sub(r"```math'([^'```]+)'```'```", r"['\1']", code)
    code = re.sub(r"```\s*```\s*==", r"] ==", code)
    return code

def python_repl_tool(code: str) -> str:
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–∫–æ–¥
    if not code.strip().startswith(MAGIC):
        return "üö´ –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∏—Å–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–¥, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω–∞–º–∏."
    if "pyodbc" in code.lower() or "select " in code.lower():
        return "üö´ SQL –∏ pyodbc –∑–∞–ø—Ä–µ—â–µ–Ω—ã."
    try:
        code2 = _sanitize_code(code)
        if code2 == "RAISE: CSV_IO_FORBIDDEN":
            return "üö´ –ß—Ç–µ–Ω–∏–µ CSV –∑–∞–ø—Ä–µ—â–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ df_<–ò–º—è–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞>."

        code2 = _patch_code(code2)

        # –ó–∞—â–∏—Ç–Ω—ã–π —Ñ–∏–∫—Å: –µ—Å–ª–∏ –ø–æ—Å–ª–µ MAGIC —Å—Ä–∞–∑—É –∏–¥—ë—Ç –∫–æ–¥ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤—Å—Ç–∞–≤–∏–º
        if code2.startswith(MAGIC) and not code2.startswith(MAGIC + "\n"):
            code2 = code2.replace(MAGIC, MAGIC + "\n", 1)

        env = {"pd": pd}
        env.update(DF_ENV)
        if G_ENV is not None:
            env["G"] = G_ENV

        exec(code2, {"__builtins__": SAFE_BUILTINS}, env)
        result = env.get("result")
        state.LastCode = code2

        if result is None:
            state.LastResultStr = None
            return "–ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è result –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n[DEBUG] –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –∫–æ–¥:\n" + code2

        if isinstance(result, list):
            state.LastResultStr = str(result)
            if len(result) > 50:
                return f"{len(result)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–µ—Ä–≤—ã–µ 50: {result[:50]}"
            return str(result)

        state.LastResultStr = str(result)
        return str(result)

    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python-–∫–æ–¥–∞: {e}"