# -*- coding: utf-8 -*-
import sys, os, subprocess, threading, traceback, io, html, math
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QLineEdit, QPushButton, QTabWidget, QTextEdit, QScrollArea, QFrame, QSizePolicy
)
from PyQt6.QtGui import QAction, QFont, QTextDocument
from PyQt6.QtCore import Qt, pyqtSignal, QTimer

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ ---
USER_BUBBLE_BG = "#DCF8C6"   # –∑–µ–ª—ë–Ω—ã–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
BOT_BUBBLE_BG  = "#CFCFCF"   # –±–æ–ª–µ–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π —Å–µ—Ä—ã–π –¥–ª—è –±–æ—Ç–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à–∏—Ä–∏–Ω—ã –ø—É–∑—ã—Ä—å–∫–æ–≤ (–Ω–µ –º–µ–Ω—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å–∏–ª–∏) ---
BUBBLE_MAX_RATIO = 0.88   # –¥–æ–ª—è —à–∏—Ä–∏–Ω—ã –≤—å—é–ø–æ—Ä—Ç–∞
BUBBLE_MIN_PX    = 520    # –±–∞–∑–æ–≤—ã–π –º–∏–Ω–∏–º—É–º –≤ –ø–∏–∫—Å–µ–ª—è—Ö
BUBBLE_PADDING_H = 20     # 10 —Å–ª–µ–≤–∞ + 10 —Å–ø—Ä–∞–≤–∞ (–¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞)

# --- –ü—É—Ç–∏ ---
BASE_DIR = r"C:\RAGOS"
SCRIPTS_DIR = os.path.join(BASE_DIR, "scripts")
VENV_PYTHON = os.path.join(BASE_DIR, "rag_env", "Scripts", "python.exe")
if SCRIPTS_DIR not in sys.path:
    sys.path.insert(0, SCRIPTS_DIR)

# --- –ò–º–ø–æ—Ä—Ç –ª–æ–≥–∏–∫–∏ ---
import state
from data.loader import load_dataframes
from engine.router import try_quick_count, try_quick_list
from engine.repl import register_dataframes
from graph.tool import load_graph

DFS_REG = None
def init_assistant():
    global DFS_REG
    dfs = load_dataframes()
    DFS_REG = dfs
    register_dataframes(dfs)
    _ = load_graph()

try:
    init_assistant()
except Exception as e:
    print("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:", e)


# === –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤ ===
def as_rich_wrapped(text: str) -> str:
    return f"<div style='white-space: pre-wrap; word-break: break-word'>{html.escape(text)}</div>"


# === –í–∏–¥–∂–µ—Ç "—á–∞—Ç" —Å –ø—É–∑—ã—Ä—å–∫–∞–º–∏ ===
class BubbleChat(QWidget):
    def __init__(self):
        super().__init__()
        self._rows = []  # —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (bubble, label)
        self.layout = QVBoxLayout(self)
        self.layout.setContentsMargins(8, 8, 8, 8)
        self.layout.setSpacing(8)
        self.layout.addStretch(1)

    def add_message(self, who, text: str):
        row = QHBoxLayout()
        row.setContentsMargins(0, 0, 0, 0)
        row.setSpacing(0)

        bubble = QFrame()
        bubble.setFrameShape(QFrame.Shape.NoFrame)
        bubble.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred)
        bubble.setStyleSheet(
            "QFrame { background-color: %s; border-radius: 10px; }" %
            (USER_BUBBLE_BG if who == "user" else BOT_BUBBLE_BG)
        )

        inner = QVBoxLayout(bubble)
        inner.setContentsMargins(10, 8, 10, 8)
        inner.setSpacing(0)

        lbl = QLabel()
        lbl.setTextFormat(Qt.TextFormat.RichText)
        lbl.setText(as_rich_wrapped(text))
        lbl.setFont(QFont("Segoe UI Emoji", 11))
        lbl.setWordWrap(True)
        lbl.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
        lbl.setTextInteractionFlags(Qt.TextInteractionFlag.TextSelectableByMouse)
        lbl.setSizePolicy(QSizePolicy.Policy.Preferred, QSizePolicy.Policy.Preferred)
        inner.addWidget(lbl)

        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø—É–∑—ã—Ä—å–∫–∞ –∫ –∫—Ä–∞—é
        if who == "user":
            row.addWidget(bubble, 0, Qt.AlignmentFlag.AlignRight)
        else:
            row.addWidget(bubble, 0, Qt.AlignmentFlag.AlignLeft)

        self.layout.insertLayout(self.layout.count() - 1, row)
        self._rows.append((bubble, lbl))

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏ –≤—ã—Å–æ—Ç—É –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏
        self._update_bubble_metrics_async()

        print(f"[UI] –ü—É–∑—ã—Ä—å {who} –¥–æ–±–∞–≤–ª–µ–Ω, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞={len(text)}")

    def resizeEvent(self, e):
        super().resizeEvent(e)
        self._update_bubble_metrics_async()

    # --- helpers ---

    def _viewport_width(self) -> int:
        # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –≤—å—é–ø–æ—Ä—Ç–∞ QScrollArea
        p = self.parentWidget()
        while p is not None and not isinstance(p, QScrollArea):
            p = p.parentWidget()
        if isinstance(p, QScrollArea):
            return p.viewport().width()
        return self.width()

    def _update_bubble_metrics_async(self):
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–∏–º —à–∏—Ä–∏–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ...
        self._apply_widths()
        # ...–∞ —Ä–∞—Å—á—ë—Ç –≤—ã—Å–æ—Ç—ã —Å–¥–µ–ª–∞–µ–º –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–¥–∞ –ª—ç–π–∞—É—Ç–∞
        QTimer.singleShot(0, self._fix_heights)

    def _apply_widths(self):
        vw = max(100, self._viewport_width())
        max_w = int(vw * BUBBLE_MAX_RATIO)
        max_w = max(320, max_w)  # —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —É–∑–∫–∏—Ö –æ–∫–Ω–∞—Ö
        min_w = min(max_w, BUBBLE_MIN_PX)

        label_max_w = max(100, max_w - BUBBLE_PADDING_H)
        label_min_w = max(80,  min_w - BUBBLE_PADDING_H)

        for bubble, lbl in self._rows:
            bubble.setMinimumWidth(min_w)
            bubble.setMaximumWidth(max_w)
            # –¥–∞—ë–º –ª–µ–π–±–ª—É —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ —à–∏—Ä–∏–Ω–µ
            lbl.setMinimumWidth(label_min_w)
            lbl.setMaximumWidth(label_max_w)

    def _fix_heights(self):
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –ø–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —à–∏—Ä–∏–Ω–µ –º–µ—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è QTextDocument
        changed = False
        for bubble, lbl in self._rows:
            w = lbl.width()
            if w <= 0:
                w = lbl.maximumWidth()
            h = self._doc_height_for(lbl, w)
            h = int(math.ceil(h)) + 2  # –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å

            if lbl.minimumHeight() != h or lbl.maximumHeight() != h:
                lbl.setMinimumHeight(0)
                lbl.setMaximumHeight(16777215)
                lbl.setMinimumHeight(h)
                lbl.setMaximumHeight(h)
                changed = True

        if changed:
            self.layout.activate()
            self.updateGeometry()

    @staticmethod
    def _doc_height_for(lbl: QLabel, width: int) -> float:
        # –°—á–∏—Ç–∞–µ–º –≤—ã—Å–æ—Ç—É rich-text —á–µ—Ä–µ–∑ QTextDocument –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π —à–∏—Ä–∏–Ω—ã
        doc = QTextDocument()
        doc.setDefaultFont(lbl.font())
        doc.setHtml(lbl.text())
        doc.setTextWidth(max(1, width))
        return doc.size().height()


class ChatTab(QWidget):
    answer_ready = pyqtSignal(str)
    def __init__(self, log_debug):
        super().__init__()
        self.log_debug = log_debug
        self.answer_ready.connect(self.on_answer_ready)

        layout = QVBoxLayout()
        self.scroll = QScrollArea()
        self.scroll.setWidgetResizable(True)
        self.scroll.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
        self.chat_widget = BubbleChat()
        self.scroll.setWidget(self.chat_widget)
        layout.addWidget(self.scroll)

        entry_layout = QHBoxLayout()
        self.entry = QLineEdit()
        self.entry.setFont(QFont("Segoe UI Emoji", 11))
        send_btn = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        send_btn.clicked.connect(self.send_query)
        entry_layout.addWidget(self.entry)
        entry_layout.addWidget(send_btn)
        layout.addLayout(entry_layout)

        self.setLayout(layout)

    def _scroll_to_bottom(self):
        QTimer.singleShot(0, lambda: self.scroll.verticalScrollBar().setValue(
            self.scroll.verticalScrollBar().maximum()))

    def send_query(self):
        q = self.entry.text().strip()
        if not q: return
        self.entry.clear()
        self.chat_widget.add_message("user", f"üë§ {q}")
        self._scroll_to_bottom()
        self.log_debug(f"[send_query] –í–æ–ø—Ä–æ—Å: {repr(q)}")

        def worker():
            try:
                self.log_debug(f"[worker] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {repr(q)}")
                ans = try_quick_count(q, DFS_REG)
                self.log_debug(f"[worker] try_quick_count -> {repr(ans)}")
                if ans is None:
                    ans = try_quick_list(q, DFS_REG)
                    self.log_debug(f"[worker] try_quick_list -> {repr(ans)}")
                if ans is None:
                    ans = "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
                self.log_debug(f"[worker] –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {repr(ans)[:200]}...")
                self.answer_ready.emit(ans)
            except Exception as e:
                tb = traceback.format_exc()
                self.log_debug(f"[worker EXCEPTION] {tb}")
                self.answer_ready.emit(f"‚ö† –û—à–∏–±–∫–∞: {e}")

        threading.Thread(target=worker, daemon=True).start()

    def on_answer_ready(self, answer: str):
        self.log_debug(f"[UI] –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞: {repr(answer)[:200]}...")
        self.chat_widget.add_message("bot", f"ü§ñ {answer}")
        self._scroll_to_bottom()


class IIsys(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ü§ñ –ò–ò.sys ‚Äî –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫")
        self.resize(1000, 700)

        menubar = self.menuBar()
        file_menu = menubar.addMenu("–§–∞–π–ª")
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)

        data_menu = menubar.addMenu("–î–∞–Ω–Ω—ã–µ")
        ingest_action = QAction("üìÇ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è", self)
        ingest_action.triggered.connect(self.run_ingest)
        data_menu.addAction(ingest_action)
        reset_action = QAction("üóë –û—á–∏—Å—Ç–∏—Ç—å+–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å", self)
        reset_action.triggered.connect(self.reset_ingest)
        data_menu.addAction(reset_action)

        settings_menu = menubar.addMenu("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.toggle_console_action = QAction("–°–∫—Ä—ã—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å", self, checkable=True)
        self.toggle_console_action.setChecked(True)
        self.toggle_console_action.triggered.connect(self.toggle_console)
        settings_menu.addAction(self.toggle_console_action)

        central_widget = QWidget()
        self.central_layout = QVBoxLayout()
        central_widget.setLayout(self.central_layout)
        self.setCentralWidget(central_widget)

        self.tabs = QTabWidget()
        self.central_layout.addWidget(self.tabs)

        self.chat_tab = ChatTab(self.log_debug)
        self.tabs.addTab(self.chat_tab, "üí¨ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç")
        self.tabs.setCurrentWidget(self.chat_tab)

        graph_tab = QWidget()
        g_layout = QVBoxLayout()
        g_layout.addWidget(QLabel("–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä —Å PyVis-–≥—Ä–∞—Ñ–æ–º."))
        graph_btn = QPushButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –≥—Ä–∞—Ñ–∞")
        graph_btn.clicked.connect(self.open_graph)
        g_layout.addWidget(graph_btn)
        graph_tab.setLayout(g_layout)
        self.tabs.addTab(graph_tab, "üåê –ì—Ä–∞—Ñ")

        self.console = QTextEdit()
        self.console.setFont(QFont("Consolas", 9))
        self.console.setReadOnly(True)
        self.console.setVisible(True)
        self.central_layout.addWidget(self.console)

        class EmittingStream(io.TextIOBase):
            def __init__(self, write_func): self.write_func = write_func
            def write(self, text):
                if text.strip(): self.write_func(text.strip())
            def flush(self): pass
        sys.stdout = EmittingStream(self.log_debug)
        sys.stderr = EmittingStream(self.log_debug)

    def toggle_console(self, checked): self.console.setVisible(checked)

    def log_debug(self, text):
        # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –∫–æ–Ω—Å–æ–ª—å (–≤ GUI-–ø–æ—Ç–æ–∫)
        QTimer.singleShot(0, lambda: self.console.append(text))

    def post_bot(self, text: str):
        # –ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –≤ —á–∞—Ç
        QTimer.singleShot(0, lambda: (
            self.chat_tab.chat_widget.add_message("bot", text),
            self.chat_tab._scroll_to_bottom()
        ))

    def run_ingest(self):
        self.chat_tab.chat_widget.add_message("bot", "üìÇ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞‚Ä¶")
        self.chat_tab._scroll_to_bottom()
        threading.Thread(target=self._run_script, args=("ingest.py", "üìÇ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è"), daemon=True).start()

    def reset_ingest(self):
        self.chat_tab.chat_widget.add_message("bot", "üóë –û—á–∏—Å—Ç–∫–∞+–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ‚Ä¶")
        self.chat_tab._scroll_to_bottom()
        threading.Thread(target=self._run_script, args=("reset_vect.py --full --yes", "üóë –û—á–∏—Å—Ç–∫–∞"), daemon=True).start()
        threading.Thread(target=self._run_script, args=("ingest.py", "üìÇ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è"), daemon=True).start()

    def open_graph(self):
        self.chat_tab.chat_widget.add_message("bot", "üåê –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∞‚Ä¶")
        self.chat_tab._scroll_to_bottom()
        threading.Thread(target=self._run_script, args=("-m scripts.graph.view --preview", "üåê –ì—Ä–∞—Ñ"), daemon=True).start()

    def _run_script(self, cmd_str, tag):
        try:
            cmd = [VENV_PYTHON] + cmd_str.split()
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT,
                                       text=True, encoding="utf-8", errors="replace")
            for line in process.stdout:
                line = line.strip()
                if not line: continue
                self.post_bot(f"{tag}: {line}")
                self.log_debug(f"{tag}: {line}")
            process.wait()
            if process.returncode != 0:
                self.post_bot(f"{tag}: ‚ö† –ö–æ–¥ {process.returncode}")
                self.log_debug(f"{tag}: –ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {process.returncode}")
        except Exception as e:
            tb = traceback.format_exc()
            self.post_bot(f"{tag}: –û—à–∏–±–∫–∞ {e}")
            self.log_debug(tb)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    ui = IIsys()
    ui.show()
    sys.exit(app.exec())