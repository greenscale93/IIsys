# -*- coding: utf-8 -*-
from __future__ import annotations
from typing import Dict, Any, Tuple, Optional, List
import re

from core.mappings import pick_column, resolve_value_info as vm_resolve_info, suggest_similar_values as vm_suggest_vals
import state
from templates_store import (
    list_templates, get_template, match_by_regex,
    render_code, run_template, lookup_alias, lookup_alias_with_values  
)
from llm_qwen import chat_json
import logging
logger = logging.getLogger("ragos")

# --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ö–µ–º—ã ---
def _format_value_suggestions(field: str, asked_value: str, suggestions: list[tuple[str,int]], used: tuple[str,int]) -> str:
    lines = []
    lines.append(f"‚ö† –¢–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ¬´{asked_value}¬ª –¥–ª—è –ø–æ–ª—è ¬´{field}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    lines.append(f'‚Üí **–ò—Å–ø–æ–ª—å–∑—É—é –±–ª–∏–∂–∞–π—à–µ–µ:** "{used[0]}" (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {used[1]}%).')
    lines.append("**–ë–ª–∏–∂–∞–π—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**")
    for i, (val, score) in enumerate(suggestions[:10], start=1):
        lines.append(f"{i}) {val}  ({score}%)")
    lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    lines.append('–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–ª–∏–∞—Å –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ¬´–ü—Ä–∏–Ω—è—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ¬ª.')
    return "\n".join(lines)

def _resolve_params_with_mappings(tpl: dict, params_in: Dict[str, Any], dfs: Dict[str, Any]):
    
    state.LastSuggestion.update({
        "kind": None, "entity": None, "field": None,
        "df_name": None, "asked_value": None, "candidates": []
    })

    params = dict(params_in or {})
    bindings = tpl.get("bindings", {}) or {}
    notes: list[str] = []
    sugg_block: str | None = None
    made_suggestion = False

    for pname, bind in bindings.items():
        if pname not in params:
            continue
        entity = bind.get("entity") or ""
        field  = bind.get("field") or ""
        if not entity or not field or entity not in dfs:
            continue

        df = dfs[entity]
        logger.info("[PARAM.BIND] param=%s entity=%s field=%s", pname, entity, field)
        col = pick_column(df, field)
        if not col:
            logger.warning("[PARAM.NO_COL] entity=%s field=%s", entity, field)
            continue
        logger.info("[PARAM.COL] entity=%s field=%s col=%s", entity, field, col)

        raw = params[pname]
        values = raw if isinstance(raw, list) else [raw]
        resolved_vals = []

        for asked in values:
            asked_s = str(asked)

            # 1) –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–ª–∏–∞—Å (value_mappings_user.json)
            canon, origin, bucket = vm_resolve_info(entity, field, asked_s)
            logger.info("[VAL.MAP] entity=%s field=%s asked=%s -> canon=%s origin=%s bucket=%s", entity, field, asked_s, canon, origin, bucket)

            ser = df[col].fillna("").astype(str)

            # 2) —Ç–æ—á–Ω–æ–µ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
            if (ser == str(canon)).any():
                logger.info("[VAL.EXACT] match in column=%s", col)
                resolved_vals.append(canon); continue

            # 3) fuzzy (top-10)
            suggestions = vm_suggest_vals(ser, asked_s, top_n=10)
            if not suggestions:
                logger.warning("[VAL.NOT_FOUND] entity=%s field=%s asked=%s", entity, field, asked_s)
                resolved_vals.append(canon)  # –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç 0
                continue

            best_val, best_score = suggestions[0]
            logger.info("[VAL.FUZZY] entity=%s field=%s asked=%s -> used=%s score=%s candidates=%d", entity, field, asked_s, best_val, best_score, len(suggestions))
            resolved_vals.append(best_val)
            notes.append(f'- –ø–æ –ø–æ–ª—é ¬´{field}¬ª: –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ ¬´{asked_s}¬ª, **–∏—Å–ø–æ–ª—å–∑—É—é –±–ª–∏–∂–∞–π—à–µ–µ** ¬´{best_val}¬ª ({best_score}%)')

            # –û–¥–∏–Ω —Ä–∞–∑ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            if not made_suggestion:
                state.LastSuggestion.update({
                    "kind": "value",
                    "entity": entity,
                    "field": field,
                    "df_name": entity,
                    "asked_value": asked_s,
                    "candidates": suggestions
                })
                state.update_selection(entity, f"df_{entity}", field, col, best_val)
                sugg_block = _format_value_suggestions(field, asked_s, suggestions, (best_val, best_score))
                made_suggestion = True

        params[pname] = resolved_vals if isinstance(raw, list) else resolved_vals[0]

    return params, notes, (sugg_block or "")

def df_schema_brief(dfs: Dict[str, Any]) -> str:
    lines=[]
    for name, df in dfs.items():
        try:
            cols = ", ".join(list(df.columns)[:40])
        except Exception:
            cols = ""
        lines.append(f"df_{name}: {cols}")
    return "\n".join(lines)

def validate_code_uses_existing(dfs: Dict[str, Any], code: str) -> Tuple[bool, str]:
    # 1) –ø—Ä–æ–≤–µ—Ä–∏–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã df_<–ò–º—è>
    used_dfs = set(re.findall(r"\bdf_([A-Za-z–ê-–Ø–∞-—è0-9_]+)\b", code))
    for ent in used_dfs:
        if ent not in dfs:
            return False, f"‚ö† –í –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º df_{ent}"
    # 2) –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫: —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –ª–∏—Ç–µ—Ä–∞–ª—ã –≤ df_–ò–º—è['–ö–æ–ª–æ–Ω–∫–∞'] / ["–ö–æ–ª–æ–Ω–∫–∞"]
    for m in re.finditer(r"df_([A-Za-z–ê-–Ø–∞-—è0-9_]+)\s*```math\s*[\"']([^\"']+)[\"']\s*```", code):
        ent, col = m.group(1), m.group(2)
        if ent in dfs and col not in dfs[ent].columns:
            return False, f"‚ö† –í df_{ent} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ ¬´{col}¬ª"
    return True, ""

# --- LLM –º—ç–ø–ø–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---

def _try_llm_map_one(question: str, tpl: dict) -> tuple[dict|None, dict|None]:
    system = (
        "–¢—ã –∏–∑–≤–ª–µ–∫–∞–µ—à—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON. "
        "–ù–µ–ª—å–∑—è –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –ø–æ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è."
    )
    user = (
        f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n"
        f"–®–∞–±–ª–æ–Ω: {{'id': '{tpl['id']}', 'text': '{tpl['text']}', 'params': {tpl.get('params', [])}}}\n"
        "–í–µ—Ä–Ω–∏ JSON: {\"params\": {\"–∏–º—è\": \"–∑–Ω–∞—á–µ–Ω–∏–µ\" –∏–ª–∏ [..]}, \"confidence\": 0-100}"
    )
    js = chat_json(system, user)
    if not js:
        return None, None
    return js, js.get("params") or {}

def _try_llm_map_any(question: str) -> tuple[dict|None, dict|None]:
    opts = [{"id": t["id"], "text": t["text"], "params": t.get("params", [])} for t in list_templates()]
    if not opts:
        return None, None
    system = ("–¢—ã –ø–æ–¥–±–∏—Ä–∞–µ—à—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –°—Ç—Ä–æ–≥–æ JSON. "
              "–ù–µ–ª—å–∑—è –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –ø–æ–ª—è –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.")
    user = (
        f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question}\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã —à–∞–±–ª–æ–Ω–æ–≤: {opts}\n"
        "–í–µ—Ä–Ω–∏ JSON: {\"template_id\":\"...\",\"params\":{...},\"confidence\":0-100}"
    )
    js = chat_json(system, user)
    if not js:
        return None, None
    return js, js.get("params") or {}

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–∏–Ω–≥ ---

def answer_via_templates(question: str, dfs: Dict[str, Any]) -> Tuple[str, Optional[Dict[str, Any]]]:
    """
    –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ —à–∞–±–ª–æ–Ω—ã (tpl_store.json) —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:
      - [PARAM.SOURCE=REGEX] –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–ø–∞–¥–∞–Ω–∏–∏ —Ä–µ–≥—É–ª—è—Ä–∫–æ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ —à–∞–±–ª–æ–Ω–∞
      - [PARAM.SOURCE=ALIAS] –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ skeleton-–∞–ª–∏–∞—Å–∞ (–±–µ–∑ LLM)
      - [PARAM.SOURCE=LLM]   –ø—Ä–∏ LLM-–ø–æ–¥–±–æ—Ä–µ (fallback)
    """
    import logging, re
    logger = logging.getLogger("ragos")

    logger.info("[Q] %s", question)

    # 1) –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å —à–∞–±–ª–æ–Ω–æ–º (—Ä–µ–≥—ç–∫—Å–ø)
    mm = match_by_regex(question)
    if mm:
        tpl, params = mm
        logger.info("[TPL.MATCH.REGEX] id=%s", tpl["id"])
        logger.info("[PARAM.SOURCE=REGEX] id=%s params=%s", tpl["id"], params)

        params_resolved, notes, sugg_block = _resolve_params_with_mappings(tpl, params, dfs)
        code = render_code(tpl["code_template"], params_resolved)
        ok, err = validate_code_uses_existing(dfs, code)
        logger.info("[CODE.VALIDATE] ok=%s err=%s", ok, err if not ok else "")
        if not ok:
            return (f'**–ü—Ä–∏–º–µ–Ω—è—é —à–∞–±–ª–æ–Ω:** {tpl["text"]}\n'
                    f'–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_resolved}\n'
                    f'‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {err}\n'
                    f'–û—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É ¬´üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤¬ª, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.', None)

        logger.info("[CODE.RUN] tpl=%s lines=%d preview=%s", tpl["id"], code.count("\n")+1, code[:200].replace("\n","‚èé"))
        out = run_template(tpl, params_resolved)
        logger.info("[CODE.RESULT] tpl=%s len=%d preview=%s", tpl["id"], len(str(out)), str(out)[:200].replace("\n","‚èé"))
        notes_text = ("\n" + "\n".join(notes)) if notes else ""
        return (f'**–ü—Ä–∏–º–µ–Ω—è—é —à–∞–±–ª–æ–Ω:** {tpl["text"]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_resolved}{notes_text}'
                f'{("\n" + sugg_block) if sugg_block else ""}\n'
                f'üß† **–ú–æ–π –æ—Ç–≤–µ—Ç:** {out}', None)

    logger.info("[TPL.REGEX.MISS]")

    # 2) –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ skeleton-–∞–ª–∏–∞—Å—É (–±–µ–∑ LLM) ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ {VAL}
    tid, val_list = lookup_alias_with_values(question)
    if tid:
        tpl = get_template(tid)
        if tpl:
            logger.info("[TPL.MATCH.ALIAS] tid=%s", tid)
            logger.info("[PARAM.SOURCE=ALIAS] tid=%s values=%s", tid, val_list)

            # —Å–æ–ø–æ—Å—Ç–∞–≤–∏–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
            names = tpl.get("params", []) or []
            def _split_maybe_list(s: str):
                raw = (s or "").strip().strip(' "\'¬´¬ª')
                parts = [p.strip(' "\'¬´¬ª') for p in re.split(r"\s*(?:,|;| –∏ | –∏–ª–∏ |/|\|)\s*", raw) if p.strip()]
                return parts if len(parts) > 1 else raw
            params = {}
            for i, name in enumerate(names):
                params[name] = _split_maybe_list(val_list[i]) if i < len(val_list) else ""
            logger.info("[PARAM.EXTRACT.ALIAS] tid=%s params=%s", tid, params)

            params_resolved, notes, sugg_block = _resolve_params_with_mappings(tpl, params, dfs)
            code = render_code(tpl["code_template"], params_resolved)
            ok, err = validate_code_uses_existing(dfs, code)
            logger.info("[CODE.VALIDATE] ok=%s err=%s", ok, err if not ok else "")
            if not ok:
                return (f'–ü–æ–¥—Ö–æ–¥–∏—Ç —à–∞–±–ª–æ–Ω: ¬´{tid}¬ª ‚Üí {tpl["text"]}\n'
                        f'–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_resolved}\n'
                        f'‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {err}\n'
                        f'–û—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É ¬´üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤¬ª, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.', None)

            logger.info("[CODE.RUN] tpl=%s lines=%d preview=%s", tpl["id"], code.count("\n")+1, code[:200].replace("\n","‚èé"))
            out = run_template(tpl, params_resolved)
            logger.info("[CODE.RESULT] tpl=%s len=%d preview=%s", tpl["id"], len(str(out)), str(out)[:200].replace("\n","‚èé"))
            notes_text = ("\n" + "\n".join(notes)) if notes else ""
            return (f'**–ü—Ä–∏–º–µ–Ω—è—é —à–∞–±–ª–æ–Ω:** {tpl["text"]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_resolved}{notes_text}'
                    f'{("\n" + sugg_block) if sugg_block else ""}\n'
                    f'üß† **–ú–æ–π –æ—Ç–≤–µ—Ç:** {out}', None)

    logger.info("[ALIAS.USE.MISS]")

    # 3) Fallback ‚Äî LLM-–ø–æ–¥–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–æ–¥–∞)
    js, params = _try_llm_map_any(question)
    if js and js.get("template_id"):
        tid = js["template_id"]
        tpl = get_template(tid)
        if tpl:
            logger.info("[TPL.MATCH.LLM] tid=%s confidence=%s", tid, js.get("confidence"))
            logger.info("[PARAM.SOURCE=LLM] tid=%s params=%s", tid, params)

            # –ø–µ—Ä–≤–∏—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å df/–∫–æ–ª–æ–Ω–æ–∫
            code = render_code(tpl["code_template"], params)
            ok, err = validate_code_uses_existing(dfs, code)
            logger.info("[CODE.VALIDATE] ok=%s err=%s", ok, err if not ok else "")
            if not ok:
                return (f'–ü–æ–¥—Ö–æ–¥–∏—Ç —à–∞–±–ª–æ–Ω: ¬´{tid}¬ª ‚Üí {tpl["text"]}\n'
                        f'–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}\n'
                        f'‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {err}\n'
                        f'–û—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É ¬´üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤¬ª, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.', None)

            params_resolved, notes, sugg_block = _resolve_params_with_mappings(tpl, params, dfs)
            code = render_code(tpl["code_template"], params_resolved)
            ok, err = validate_code_uses_existing(dfs, code)
            logger.info("[CODE.VALIDATE] ok=%s err=%s", ok, err if not ok else "")
            if not ok:
                return (f'–ü–æ–¥—Ö–æ–¥–∏—Ç —à–∞–±–ª–æ–Ω: ¬´{tid}¬ª ‚Üí {tpl["text"]}\n'
                        f'–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_resolved}\n'
                        f'‚ö† –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {err}\n'
                        f'–û—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É ¬´üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤¬ª, —á—Ç–æ–±—ã —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.', None)

            logger.info("[CODE.RUN] tpl=%s lines=%d preview=%s", tpl["id"], code.count("\n")+1, code[:200].replace("\n","‚èé"))
            out = run_template(tpl, params_resolved)
            logger.info("[CODE.RESULT] tpl=%s len=%d preview=%s", tpl["id"], len(str(out)), str(out)[:200].replace("\n","‚èé"))
            text = (f'–ü–æ–¥—Ö–æ–¥–∏—Ç —à–∞–±–ª–æ–Ω: ¬´{tid}¬ª ‚Üí {tpl["text"]}\n'
                    f'–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {params_resolved}'
                    f'{("\n" + "\n".join(notes)) if notes else ""}'
                    f'{("\n" + sugg_block) if sugg_block else ""}\n'
                    f'üß™ **–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:** {out}')
            sugg = {"kind": "save_alias", "template_id": tid, "question": question}
            return text, sugg

    logger.info("[TPL.MATCH.NONE]")
    return ("‚Ñπ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω. –û—Ç–∫—Ä–æ–π –≤–∫–ª–∞–¥–∫—É ¬´üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.", None)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "üß© –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤" ---

def generate_template_with_llm(question: str, dfs: Dict[str, Any], known: List[Dict[str,Any]]) -> Optional[Dict[str,Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict:
      {id, text, params, code_template, [validation_error]}
    """
    schema = df_schema_brief(dfs)
    system = (
        "–¢—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è Pandas. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã –∏ –∫–æ–ª–æ–Ω–∫–∏. –ù–∏–∫–∞–∫–∏—Ö SQL. "
        "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '# RAGOS_AUTOCODE' –∏ –∫–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é result."
    )
    user = (
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã –∏ –∫–æ–ª–æ–Ω–∫–∏:\n{schema}\n"
        f"–ü—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤: {[{'id':t['id'],'text':t['text'],'params':t['params']} for t in known[:5]]}\n"
        "–í–µ—Ä–Ω–∏ JSON –≤–∏–¥–∞: {"
        "\"id\": \"—á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π_id\", "
        "\"text\": \"–¢–µ–∫—Å—Ç —à–∞–±–ª–æ–Ω–∞ —Å {–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏}\", "
        "\"params\": [\"—Å–ø–∏—Å–æ–∫_–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\"], "
        "\"code_template\": \"–ö–æ–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤} (–¥–ª—è —Å—Ç—Ä–æ–∫ –ø–æ–¥—Å—Ç–∞–≤–ª—è–π {–∏–º—è}, –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–¥—Å—Ç–∞–≤–ª—è–π {–∏–º—è})\"}"
    )
    js = chat_json(system, user)
    if not js:
        return None
    for k in ("id","text","params","code_template"):
        if k not in js:
            return None
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—à–∏–º df/–∫–æ–ª–æ–Ω–∫–∞–º
    code = render_code(js["code_template"], {p:"TEST" for p in js.get("params",[])})
    ok, err = validate_code_uses_existing(dfs, code)
    logger.info("[CODE.VALIDATE] ok=%s err=%s", ok, err if not ok else "")
    if not ok:
        js["validation_error"] = err
    return js